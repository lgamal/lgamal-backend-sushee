// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// OrderUsecase is an autogenerated mock type for the OrderUsecase type
type OrderUsecase struct {
	mock.Mock
}

// AddOrder provides a mock function with given fields: username, reqBody
func (_m *OrderUsecase) AddOrder(username string, reqBody *entity.OrderReqBody) (*entity.Order, error) {
	ret := _m.Called(username, reqBody)

	var r0 *entity.Order
	if rf, ok := ret.Get(0).(func(string, *entity.OrderReqBody) *entity.Order); ok {
		r0 = rf(username, reqBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *entity.OrderReqBody) error); ok {
		r1 = rf(username, reqBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddReview provides a mock function with given fields: username, r
func (_m *OrderUsecase) AddReview(username string, r *entity.ReviewAddReqBody) (*entity.Review, error) {
	ret := _m.Called(username, r)

	var r0 *entity.Review
	if rf, ok := ret.Get(0).(func(string, *entity.ReviewAddReqBody) *entity.Review); ok {
		r0 = rf(username, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *entity.ReviewAddReqBody) error); ok {
		r1 = rf(username, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderHistory provides a mock function with given fields: username, oq
func (_m *OrderUsecase) GetOrderHistory(username string, oq *entity.OrderHistoryQuery) (*[]entity.Order, error) {
	ret := _m.Called(username, oq)

	var r0 *[]entity.Order
	if rf, ok := ret.Get(0).(func(string, *entity.OrderHistoryQuery) *[]entity.Order); ok {
		r0 = rf(username, oq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *entity.OrderHistoryQuery) error); ok {
		r1 = rf(username, oq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderStatus provides a mock function with given fields: oq
func (_m *OrderUsecase) GetOrderStatus(oq *entity.OrderStatusQuery) (*[]entity.Order, error) {
	ret := _m.Called(oq)

	var r0 *[]entity.Order
	if rf, ok := ret.Get(0).(func(*entity.OrderStatusQuery) *[]entity.Order); ok {
		r0 = rf(oq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.OrderStatusQuery) error); ok {
		r1 = rf(oq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentOption provides a mock function with given fields:
func (_m *OrderUsecase) GetPaymentOption() (*[]entity.PaymentOption, error) {
	ret := _m.Called()

	var r0 *[]entity.PaymentOption
	if rf, ok := ret.Get(0).(func() *[]entity.PaymentOption); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.PaymentOption)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderStatus provides a mock function with given fields: reqBody
func (_m *OrderUsecase) UpdateOrderStatus(reqBody *entity.OrderStatusUpdateReqBody) (*entity.Order, error) {
	ret := _m.Called(reqBody)

	var r0 *entity.Order
	if rf, ok := ret.Get(0).(func(*entity.OrderStatusUpdateReqBody) *entity.Order); ok {
		r0 = rf(reqBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.OrderStatusUpdateReqBody) error); ok {
		r1 = rf(reqBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderUsecase creates a new instance of OrderUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderUsecase(t mockConstructorTestingTNewOrderUsecase) *OrderUsecase {
	mock := &OrderUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
