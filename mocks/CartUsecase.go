// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// CartUsecase is an autogenerated mock type for the CartUsecase type
type CartUsecase struct {
	mock.Mock
}

// AddCart provides a mock function with given fields: username, c
func (_m *CartUsecase) AddCart(username string, c *entity.CartReqBody) (*entity.CartResBody, error) {
	ret := _m.Called(username, c)

	var r0 *entity.CartResBody
	if rf, ok := ret.Get(0).(func(string, *entity.CartReqBody) *entity.CartResBody); ok {
		r0 = rf(username, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.CartResBody)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *entity.CartReqBody) error); ok {
		r1 = rf(username, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCart provides a mock function with given fields: username
func (_m *CartUsecase) DeleteCart(username string) error {
	ret := _m.Called(username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCartByCartId provides a mock function with given fields: username, cartId
func (_m *CartUsecase) DeleteCartByCartId(username string, cartId int) error {
	ret := _m.Called(username, cartId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(username, cartId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCart provides a mock function with given fields: username
func (_m *CartUsecase) GetCart(username string) (*[]entity.Cart, error) {
	ret := _m.Called(username)

	var r0 *[]entity.Cart
	if rf, ok := ret.Get(0).(func(string) *[]entity.Cart); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCartByCartId provides a mock function with given fields: username, cartId, updatePremises
func (_m *CartUsecase) UpdateCartByCartId(username string, cartId int, updatePremises *entity.CartEditDetailsReqBody) (*entity.Cart, error) {
	ret := _m.Called(username, cartId, updatePremises)

	var r0 *entity.Cart
	if rf, ok := ret.Get(0).(func(string, int, *entity.CartEditDetailsReqBody) *entity.Cart); ok {
		r0 = rf(username, cartId, updatePremises)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, *entity.CartEditDetailsReqBody) error); ok {
		r1 = rf(username, cartId, updatePremises)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCartUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartUsecase creates a new instance of CartUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartUsecase(t mockConstructorTestingTNewCartUsecase) *CartUsecase {
	mock := &CartUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
