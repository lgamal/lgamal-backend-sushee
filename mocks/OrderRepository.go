// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// AddOrder provides a mock function with given fields: newOrder
func (_m *OrderRepository) AddOrder(newOrder *entity.Order) (*entity.Order, error) {
	ret := _m.Called(newOrder)

	var r0 *entity.Order
	if rf, ok := ret.Get(0).(func(*entity.Order) *entity.Order); ok {
		r0 = rf(newOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Order) error); ok {
		r1 = rf(newOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOrderedMenu provides a mock function with given fields: newOrderedMenus
func (_m *OrderRepository) AddOrderedMenu(newOrderedMenus *[]entity.OrderedMenu) (*[]entity.OrderedMenu, error) {
	ret := _m.Called(newOrderedMenus)

	var r0 *[]entity.OrderedMenu
	if rf, ok := ret.Get(0).(func(*[]entity.OrderedMenu) *[]entity.OrderedMenu); ok {
		r0 = rf(newOrderedMenus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.OrderedMenu)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*[]entity.OrderedMenu) error); ok {
		r1 = rf(newOrderedMenus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddReview provides a mock function with given fields: review
func (_m *OrderRepository) AddReview(review *entity.Review) (*entity.Review, error) {
	ret := _m.Called(review)

	var r0 *entity.Review
	if rf, ok := ret.Get(0).(func(*entity.Review) *entity.Review); ok {
		r0 = rf(review)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Review) error); ok {
		r1 = rf(review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderById provides a mock function with given fields: orderId
func (_m *OrderRepository) GetOrderById(orderId int) (*entity.Order, error) {
	ret := _m.Called(orderId)

	var r0 *entity.Order
	if rf, ok := ret.Get(0).(func(int) *entity.Order); ok {
		r0 = rf(orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderHistory provides a mock function with given fields: userId, oq
func (_m *OrderRepository) GetOrderHistory(userId int, oq entity.OrderHistoryQuery) (*[]entity.Order, error) {
	ret := _m.Called(userId, oq)

	var r0 *[]entity.Order
	if rf, ok := ret.Get(0).(func(int, entity.OrderHistoryQuery) *[]entity.Order); ok {
		r0 = rf(userId, oq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, entity.OrderHistoryQuery) error); ok {
		r1 = rf(userId, oq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderStatus provides a mock function with given fields: oq
func (_m *OrderRepository) GetOrderStatus(oq entity.OrderStatusQuery) (*[]entity.Order, error) {
	ret := _m.Called(oq)

	var r0 *[]entity.Order
	if rf, ok := ret.Get(0).(func(entity.OrderStatusQuery) *[]entity.Order); ok {
		r0 = rf(oq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.OrderStatusQuery) error); ok {
		r1 = rf(oq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderedMenuById provides a mock function with given fields: orderedMenuId
func (_m *OrderRepository) GetOrderedMenuById(orderedMenuId int) (*entity.OrderedMenu, error) {
	ret := _m.Called(orderedMenuId)

	var r0 *entity.OrderedMenu
	if rf, ok := ret.Get(0).(func(int) *entity.OrderedMenu); ok {
		r0 = rf(orderedMenuId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.OrderedMenu)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(orderedMenuId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentOption provides a mock function with given fields:
func (_m *OrderRepository) GetPaymentOption() (*[]entity.PaymentOption, error) {
	ret := _m.Called()

	var r0 *[]entity.PaymentOption
	if rf, ok := ret.Get(0).(func() *[]entity.PaymentOption); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.PaymentOption)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAvgReviewScoreByMenuId provides a mock function with given fields: MenuId
func (_m *OrderRepository) UpdateAvgReviewScoreByMenuId(MenuId int) error {
	ret := _m.Called(MenuId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(MenuId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderByOrderId provides a mock function with given fields: orderId, newOrderStatus
func (_m *OrderRepository) UpdateOrderByOrderId(orderId int, newOrderStatus *entity.Order) error {
	ret := _m.Called(orderId, newOrderStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *entity.Order) error); ok {
		r0 = rf(orderId, newOrderStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrderRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderRepository(t mockConstructorTestingTNewOrderRepository) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
